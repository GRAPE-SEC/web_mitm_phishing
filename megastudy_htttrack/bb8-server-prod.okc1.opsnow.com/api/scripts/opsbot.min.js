var opsbotFrame = null, opsbotPId = "", opsbotTId = "", opsbotMId = "", opsbotJS = document.getElementById("opsbot-js"), opsbotReady = false,
opsbotSrc = opsbotJS.getAttribute("src").split("/"), opsbotData = {
    styleSheet: "",
    chatPreview: "",
    chatPreviewBox: "",
    chatWrapper: "",
    chatFloating : "",
    chatImg: "",
    chatImgBox: "",
    chatNameBox: "",
    chatName: "",
    previewCloseButton: "",
    chatContents: [],
    chatBubbleArrow: "",
    windowHead: document.getElementsByTagName("head")[0],
    eventData: {},
    serverUrl: opsbotSrc[0] + "//" + opsbotSrc[2],
    defaultLang: "ko",
    lang: "",
    frontUrl: "https://chatbot.opsnow.com",
    right: 0,
    bottom: 0,
    lastScrollTop: 0,
    htmlWidgetOpen: 'inline',
    opsbotWindowObj: null,
    width: 0,
    height: 0,
    greetings: "",
    greetingsList: [],
    currentGreetings:[],
    timeout: 0,
    showPreview: false,
    showGreetings: true,
    closeClicked: false,
    closeClickedCnt: 0,
    opsbotClose: false
};
function opsbotStart(global, opsbot) {
    "use strict";
    changeOpsbotUrlEvent()
    global.removeEventListener('popstate', changeOpsbotUrlEvent, false)
    // 시작하기 전에 자식 노드가 있으면 제거하기
    while (opsbot.firstChild) {
        opsbot.removeChild(opsbot.firstChild);
    }
    if(opsbot.getAttribute("lang")){
        opsbotData.lang = opsbot.getAttribute("lang"), opsbotData.defaultLang = opsbot.getAttribute("lang");
    }
    global.addEventListener('popstate', changeOpsbotUrlEvent, false);
    if(opsbotData.defaultLang != "ko"){
        return;
    }
    var myCSS=document.querySelector("link[href*='/api/css/opsbot.min.css']")
    if(!myCSS){
        opsbotData.styleSheet = document.createElement("link");
        opsbotData.styleSheet.rel = "stylesheet";
        opsbotData.styleSheet.type = "text/css";
        opsbotData.styleSheet.href = opsbotData.serverUrl + "/api/css/opsbot.min.css";
        opsbotData.windowHead.appendChild(opsbotData.styleSheet);
    }

    if(opsbotData.serverUrl.match(/.*prd.helpnow.*/)){
        opsbotData.frontUrl = "https://kr.helpnow.ai"
    } else if(opsbotData.serverUrl.match(/.*dev.helpnow.*/)){
        opsbotData.frontUrl = "https://krdev.helpnow.ai";
    } else if(!opsbotData.serverUrl.match(/.*prod.*/)){
        opsbotData.frontUrl = "https://chatbotdev.opsnow.com";
    }

    if(opsbot.getAttribute("data-dns")){
        let dns = opsbot.getAttribute("data-dns");
        opsbotData.frontUrl = opsbotData.frontUrl.replace('kr.helpnow.ai', dns).replace('krdev.helpnow.ai', dns).replace('chatbotdev.opsnow.com', dns).replace('chatbot.opsnow.com', dns)
    }

    opsbotData.frontUrl += "/chatbot/" + opsbot.getAttribute("data-id");
    if(opsbot.getAttribute("site")){
        opsbotData.frontUrl += "?site=" + opsbot.getAttribute("site")
    }
    if(opsbot.getAttribute("start_query")){
        let operator = "?"
        if(opsbotData.frontUrl.indexOf('?') > -1){
            operator = "&"
        }
        opsbotData.frontUrl += operator;
        opsbotData.frontUrl += "start_query=" + opsbot.getAttribute("start_query")
    }
    if(opsbot.getAttribute("pid")){
        let operator = "?"
        if(opsbotData.frontUrl.indexOf('?') > -1){
            operator = "&"
        }
        opsbotPId = opsbot.getAttribute("pid");
        opsbotData.frontUrl += operator;
        opsbotData.frontUrl += "pid=" + opsbot.getAttribute("pid")
    }
    if(opsbot.getAttribute("tid")){
        let operator = "?"
        if(opsbotData.frontUrl.indexOf('?') > -1){
            operator = "&"
        }
        opsbotTId = opsbot.getAttribute("tid");
        opsbotData.frontUrl += operator;
        opsbotData.frontUrl += "tid=" + opsbot.getAttribute("tid")
    }
    if(opsbot.getAttribute("mid")){
        let operator = "?"
        if(opsbotData.frontUrl.indexOf('?') > -1){
            operator = "&"
        }
        opsbotMId = opsbot.getAttribute("mid");
        opsbotData.frontUrl += operator;
        opsbotData.frontUrl += "mid=" + opsbot.getAttribute("mid")
    }

    if(location.href.indexOf('.opsnow.com') > -1 || location.href.indexOf('.sec-alertnow.com') > -1){
        let operator = "?"
        if(opsbotData.frontUrl.indexOf('?') > -1){
            operator = "&"
        }
        opsbotData.frontUrl += operator;
        opsbotData.frontUrl += "opsnow=y";
        opsnowScrollEvent(opsbot, opsbotData);
    }
    
    if(location.href.indexOf('skbroadband') > -1){
        skbOpsbotScrollEvent(opsbot, opsbotData)
    }
    
    if(location.href.indexOf('.opsnow-gov.com') > -1 ){
        let operator = "?"
        if(opsbotData.frontUrl.indexOf('?') > -1){
            operator = "&"
        }
        opsbotData.frontUrl += operator;
        opsbotData.frontUrl += "opsnowG=y";
        opsnowScrollEvent(opsbot, opsbotData);
    }

    if(opsbot.getAttribute("right")){
        opsbotData.right = opsbot.getAttribute("right")
    }
    if(opsbot.getAttribute("bottom")){
        opsbotData.bottom = opsbot.getAttribute("bottom")
    }
    if(opsbot.getAttribute("width")){
        opsbotData.width = opsbot.getAttribute("width")
    }
    if(opsbot.getAttribute("height")){
        opsbotData.height = opsbot.getAttribute("height")
    }

    if(sessionStorage && sessionStorage.getItem("opsbot_close_greeting_cnt")){
        opsbotData.closeClickedCnt = parseInt(sessionStorage.getItem("opsbot_close_greeting_cnt"));
    }

    opsbotFrame = document.createElement("iframe");
    opsbotFrame.setAttribute("src", opsbotData.frontUrl);
    let documenttitle = "ChatBot"
    if(document.documentElement.lang && document.documentElement.lang == "ko"){
        documenttitle = "챗봇"
    }
    opsbotFrame.setAttribute("title", documenttitle);
    opsbotFrame.setAttribute("frameborder", "0");
    opsbotFrame.setAttribute("allowusermedia", "true");

    opsbotData.chatPreview = document.createElement("div");
    opsbotData.chatPreview.setAttribute("id", "opsbot-tooltip");
    opsbotData.chatPreview.setAttribute("data-state", "button");

    opsbotData.chatPreviewBox = document.createElement("div");
    opsbotData.chatPreviewBox.setAttribute("id", "opsbot-preview-box");

    opsbotData.chatWrapper = document.createElement("div");
    opsbotData.chatWrapper.setAttribute("id", "opsbot-chat");
    opsbotData.chatWrapper.setAttribute("data-state", "button");
    opsbotData.chatWrapper.setAttribute("style", "display: none;");
    opsbotData.chatWrapper.onmouseover = function(){
        if(opsbotData.eventData.greetingsType == 'slide' && opsbotData.eventData.greetingsView == 'hover'){
            clearTimeout(opsbotData.timeout);
            opsbotData.timeout = setTimeout(()=>{
                let textList = document.getElementsByClassName('opsbot-text');
                for (let i = 0; i < textList.length; ++i) {
                    let item = textList[i];  
                    item.setAttribute('style', `color: ${opsbotData.eventData.greetingsFont}`);
                }
            },250)
        }
    };
    opsbotData.chatWrapper.onmouseout = function(){
        if(opsbotData.eventData.greetingsType == 'slide' && opsbotData.eventData.greetingsView == 'hover'){
            clearTimeout(opsbotData.timeout);
            opsbotData.timeout = setTimeout(()=>{
                let textList = document.getElementsByClassName('opsbot-text');
                for (let i = 0; i < textList.length; ++i) {
                    let item = textList[i];  
                    item.setAttribute('style', `color: ${opsbotData.eventData.greetings}`);
                }
            },100)
        }
    };

    opsbotData.chatFloating = document.createElement("div");
    opsbotData.chatFloating.setAttribute("id", "opsbot-header");

    opsbotData.chatImgBox = document.createElement("div");
    opsbotData.chatImgBox.setAttribute("id", "opsbot-img-box");

    opsbotData.chatImg = document.createElement("img");
    opsbotData.chatImg.setAttribute("id", "opsbot-img");

    opsbotData.chatNameBox = document.createElement("div");
    opsbotData.chatNameBox.setAttribute("id", "opsbot-name-box");

    opsbotData.chatName = document.createElement("div");
    opsbotData.chatName.setAttribute("id", "opsbot-name");

    opsbotData.chatFloating.appendChild(opsbotData.chatImgBox);
    opsbotData.chatImgBox.appendChild(opsbotData.chatImg);
    opsbotData.chatFloating.appendChild(opsbotData.chatNameBox);
    opsbotData.chatNameBox.appendChild(opsbotData.chatName);

    opsbotData.chatPreview.appendChild(opsbotData.chatPreviewBox);

    opsbot.appendChild(opsbotData.chatWrapper);

    opsbotData.chatWrapper.appendChild(opsbotFrame);
    opsbotData.chatWrapper.appendChild(opsbotData.chatFloating);
    opsbotData.chatWrapper.appendChild(opsbotData.chatPreview);

    opsbotData.chatFloating.onclick = function(){
        showOpsbotChatting()
    }

    opsbotFrame.onload = function(){
        opsbot.setAttribute("style", "display: block;");
        // opsbotFrame.contentWindow.document.querySelector("[data-state='button']").setAttribute('data-state', 'card'); 
    }

    function initFloating(){
        opsbotData.htmlWidgetOpen = opsbotData.eventData.htmlWidgetOpen;
        opsbotData.chatImg.setAttribute('src', opsbotData.eventData.img)
        opsbotData.chatImg.setAttribute('alt', opsbotData.eventData.title);
        opsbotData.chatName.setAttribute('style', `color:${opsbotData.eventData.chatbotNameFont}`)
        opsbotData.chatWrapper.setAttribute('style', makeOpsbotFloatingStyle(`display:block;`));
        opsbotData.chatFloating.setAttribute('style', makeOpsbotFloatingStyle(`background-color:${opsbotData.eventData.floating};height:${opsbotData.eventData.floatingIconSize}px;width:${opsbotData.eventData.floatingIconSize}px;`))
        opsbotFrame.setAttribute("style", "display: none;");
        opsbotReady = true;
    }

    function getFavicon(){
        var favicon = undefined;
        var nodeList = document.getElementsByTagName("link");
        for (var i = 0; i < nodeList.length; i++)
        {
            if((nodeList[i].getAttribute("rel") == "icon")||(nodeList[i].getAttribute("rel") == "shortcut icon"))
            {
                favicon = nodeList[i].getAttribute("href");
                if(!favicon.startsWith('http')){
                    if(!favicon.startsWith('/')){favicon = "/" + favicon}
                    favicon = location.protocol +"//"+ location.hostname + favicon;
                }
            }
        }
        return favicon;
    }

    global.onmessage = function(event){
        if(typeof event.data !== 'object') return;

        switch (event.data.eventName) {
            case "close-clicked":
                opsbotData.chatWrapper.setAttribute("data-state", "button");
                opsbotFrame.setAttribute("style", "display: none;");
                opsbotData.showGreetings = true;
                initFloating()
                if(opsbotData.eventData.floatingIconClose){
                    opsbotGreetingsSetting.initPreviewContents();
                }
                opsbotGreetingsSetting.initGreetings()
                break;
            case "opsbot-init":
                opsbotData.eventData = event.data.eventData
                if(opsbotData.eventData.locationUseYn){
                    if(opsbotData.eventData.locations){
                        const domains = opsbotData.eventData.locations.split(",");
                        let checkDomain = false;
                        for (const domain of domains) {
                            const regex = new RegExp(domain.replace("*","^[^.]+").replace(".","\\.").replace("-","\\-") + "$", "gi"); ;
                            if (regex.test(global.location.hostname)) {
                                checkDomain = true
                            }
                        }
                        if(!checkDomain){
                           return
                        }
                    }
                }
                opsbotFrame.contentWindow.postMessage( { eventName: "page-url",eventData: {url: global.location.href, pid: opsbotPId, tid:  opsbotTId, mid:  opsbotMId, pvalue: opsnowGetCookie(opsbotPId), tvalue: opsnowGetCookie(opsbotTId), mvalue: opsnowGetCookie(opsbotMId)} }, '*' );
                opsbotData.showGreetings = true;
                initFloating()
                break;
            case "request-title-favicon":
                opsbotData.opsbotWindowObj.postMessage( { eventName: "title-favicon", eventData: {title: document.title, favicon: getFavicon()} }, '*' );
                break;
            case "greetings-setting":
                if(opsbotData.eventData.floatingIconClose){
                    opsbotData.currentGreetings = [];
                    opsbotGreetingsSetting.initPreviewContents();
                    opsbotGreetingsSetting.initGreetings();
                }
                if(opsbotData.closeClicked){ return; }
                if(opsbotData.closeClickedCnt >= opsbotData.eventData.greetingsCloseCnt){
                    return opsbotData.closeClicked = true;
                }
                if(opsbotData.eventData.isMobile && opsbotData.eventData.greetingsView == 'hover'){ return;}
                opsbotData.greetingsList.forEach(item => {
                    clearTimeout(item.timeout);
                });
                opsbotData.greetingsList = event.data.eventData.greetings
                opsbotData.greetingsList.forEach(item => {
                    if(!item.resList){return}
                    if(item.resList.length == 0){return}
                    if(!item.stayTime){
                        opsbotData.showPreview = true;
                        opsbotData.currentGreetings = item.resList;
                        opsbotData.eventData.greetingsType = item.formType;
                        opsbotGreetingsSetting.initPreviewContents();
                        opsbotGreetingsSetting.initGreetings();
                        if(!opsbotData.showGreetings){
                            opsbotData.chatPreview.setAttribute("style", "display: none;");
                        }
                        return;
                    }
                    item.timeout = setTimeout(()=>{
                        opsbotData.showPreview = true;
                        opsbotData.currentGreetings = item.resList;
                        opsbotData.eventData.greetingsType = item.formType;
                        opsbotGreetingsSetting.initPreviewContents();
                        opsbotGreetingsSetting.initGreetings();
                        if(!opsbotData.showGreetings){
                            opsbotData.chatPreview.setAttribute("style", "display: none;");
                        }
                    }, item.stayTime * 1000);
                })
                break;
            case "request-user-info":
                // 사용자 정보가 있는 경우 정보 전달
                if(typeof helpNowUserInfo === 'undefined' || helpNowUserInfo === null){return;}
                if(opsbotData.htmlWidgetOpen == 'new'){
                    opsbotData.opsbotWindowObj.postMessage( { eventName: "user-info", eventData: helpNowUserInfo }, '*' );
                }else{
                    opsbotFrame.contentWindow.postMessage( { eventName: "user-info", eventData: helpNowUserInfo }, '*' );
                }
                break;
            case "greeting-event-message":
                if(!event.data.eventData.eventContent){return;}
                if(opsbotData.closeClicked){ return; }
                if(opsbotData.closeClickedCnt >= opsbotData.eventData.greetingsCloseCnt){
                    return opsbotData.closeClicked = true;
                }
                if(!opsbotData.showGreetings){ return; }
                opsbotData.eventData.greetingsType = event.data.eventData.formType;
                const text = event.data.eventData.eventContent;
                opsbotGreetingsSetting.settingGrettings(text);
                opsbotGreetingsSetting.initPreviewContents();
                opsbotGreetingsSetting.initGreetings();
                break;
            case "greeting-close-event":
                break;
            default:
                break;
        }
    }
}

function opsnowGetCookie(name){
    var value = document.cookie.match('(^|;) ?' + name + '=([^;]*)(;|$)');
    return value? decodeURI(value[2]) : null;
}

function opsnowScrollEvent(opsbot, opsbotData){
    window.onscroll = function(){
        var st = window.pageYOffset || document.documentElement.scrollTop;
        if (st > opsbotData.lastScrollTop){
            opsbot.setAttribute("style", "display: none;");
        } else {
            if(opsbotData.opsbotClose){ return; }
            opsbot.setAttribute("style", "display: block;");
        }
        opsbotData.lastScrollTop = st <= 0 ? 0 : st; // For Mobile or negative scrolling
    }
}

function skbOpsbotScrollEvent(opsbot, opsbotData){
    window.onscroll = function(){
        let scrollTimeout = null;
        // 스크롤 중일 때 요소를 숨깁니다.
        opsbot.setAttribute("style", "display: none;");

        // 스크롤 중에는 타임아웃을 클리어합니다.
        clearTimeout(scrollTimeout);

        // 스크롤 멈춘 후 1초 뒤에 요소를 다시 표시합니다.
        scrollTimeout = setTimeout(() => {
            if(opsbotData.opsbotClose){ return; }
            opsbot.setAttribute("style", "display: block;");
        }, 500);
    }
}

function makeOpsbotWrapperStyle(){
    let style = `background-color:${opsbotData.eventData.floating};`
    if(opsbotData.width){
        style += `width:${opsbotData.width};`
    }
    if(opsbotData.height){
        style += `height:${opsbotData.height};`
    }
    return style;
}

function makeOpsbotFloatingStyle(style){
    if(opsbotData.right){
        style += `right:${opsbotData.right};`
    }
    if(opsbotData.bottom){
        style += `bottom:${opsbotData.bottom};`
    }
    return style;
}

function showOpsbotChatting(){
    if(opsbotData.htmlWidgetOpen == 'new'){
        var opsbotWidth = 450;
        var opsbotHeight = 720;
        var opsbotPos = (document.body.offsetWidth) - opsbotWidth;
        opsbotPos += window.screenLeft;
        if (opsbotData.opsbotWindowObj == null || opsbotData.opsbotWindowObj.closed){
            opsbotData.opsbotWindowObj = window.open(opsbotData.frontUrl.replace('/chatbot/', '/chatbot-screen/'), "opsbot", "overflow=auto,width="+opsbotWidth+"px,height="+opsbotHeight+"px,left="+opsbotPos+",top=0");
            opsbotData.opsbotWindowObj.focus();
        }else{
            opsbotData.opsbotWindowObj.focus();
        }
        return;
    }
    opsbotData.showGreetings = false;
    opsbotData.chatWrapper.setAttribute("data-state", "card");
    opsbotData.chatWrapper.setAttribute('style', makeOpsbotWrapperStyle(''))
    opsbotFrame.setAttribute("style", "display: block; height: 100%; width: 100%");
    opsbotData.chatFloating.setAttribute('style', "display: none");
    opsbotFrame.contentWindow.postMessage( { eventName: "change-data-state" }, '*' )
    opsbotData.chatPreview.setAttribute("style", "display: none;");
}

function changeOpsbotUrlEvent(){
    if(!opsbotFrame || !opsbotFrame.contentWindow){return;}
    opsbotFrame.contentWindow.postMessage( { eventName: "page-url",eventData: {url: window.location.href, pid: opsbotPId, tid: opsbotTId, pvalue: opsnowGetCookie(opsbotPId), tvalue: opsnowGetCookie(opsbotTId) } }, '*' );
}

function checkOpsbotCreated() {
    var opsbot = document.getElementById("opsbot");
    if(!opsbot) {
        //The node we need does not exist yet.
        //Wait 500ms and try again
        window.setTimeout(checkOpsbotCreated,0);
        return;
    }
    opsbotStart(window, opsbot);
    var MutationObserver = window.MutationObserver || window.WebKitMutationObserver
    var observer = new MutationObserver(function(mutations) {
        mutations.forEach(function(mutation) {
            if(mutation.attributeName == "lang"){
                opsbotStart(window, opsbot);
            }
        });
    });
    var config = {
        attributes: true,
        childList: false,
        characterData: false
    };
    observer.observe(opsbot,config);
}

var opsbotChangeGreetings = function ({ greetingKey, greetingData }) { 
    const opsbot = document.getElementById("opsbot");
    if(!opsbot && !opsbotData.eventData.greetingsType) { return; }
    let eventData = { greetingKey, greetingData }
    opsbotFrame.contentWindow.postMessage( { eventName: "make-greeting-event", eventData: eventData }, '*' );
}

var opsbotCloseGreetings = function () { 
    const opsbot = document.getElementById("opsbot");
    if(!opsbot && !opsbotData.eventData.greetingsType) { return; }
    opsbotGreetingsSetting.previewCloseClicked();
}

const opsbotGreetingsSetting = {   
    settingGrettings: function(text){
        opsbotData.currentGreetings = [{"text" : text }];
        opsbotData.showPreview = true;
        opsbotData.eventData.greetingsView = "basic";
        opsbotData.greetingsList.forEach(item => {
            clearTimeout(item.timeout);
        });
    },
    removeScriptAndDownload : function(htmlString) {
        // Create a temporary div element
        let tempDiv = document.createElement('div');
        // Set the innerHTML of the div with the provided HTML string
        tempDiv.innerHTML = htmlString;
    
        // Remove script tags
        let scriptTags = tempDiv.querySelectorAll('script');
        scriptTags.forEach(function (scriptTag) {
            scriptTag.parentNode.removeChild(scriptTag);
        });
    
        // Remove links with download attribute
        let aLinks = tempDiv.querySelectorAll('a');
        aLinks.forEach(function (aLink) {
            aLink.parentNode.removeChild(aLink);
        });
    
        // Get the innerHTML of the modified div
        let sanitizedHTML = tempDiv.innerHTML;
    
        return sanitizedHTML;
    },
    initPreviewContents : function(){
        const opsbot = document.getElementById("opsbot");
        if(!opsbot && !opsbotData.eventData.greetingsType) { return; }
        if(opsbotData.eventData.greetingsType == 'slide'){
            if(opsbotData.currentGreetings.length > 0){
                opsbotData.chatFloating.setAttribute('style', makeOpsbotFloatingStyle(`background-color:${opsbotData.eventData.floating};height:${opsbotData.eventData.floatingIconSize}px;width:${opsbotData.eventData.floatingIconSize}px; box-shadow: none;`))
            }
        }
        if(opsbotData.eventData.greetingsType == 'bubble'){
            opsbotData.chatFloating.setAttribute('style', makeOpsbotFloatingStyle(`background-color:${opsbotData.eventData.floating};height:${opsbotData.eventData.floatingIconSize}px;width:${opsbotData.eventData.floatingIconSize}px;`))
        }
        opsbot.setAttribute("style", "display: block;");
        opsbotData.chatPreview.setAttribute("style", "display: block;");
        opsbotData.chatPreviewBox.innerHTML = "";
        opsbotData.previewCloseButton = document.createElement("button");
        opsbotData.previewCloseButton.setAttribute("id", "opsbot-close");
        if(opsbotData.eventData.isMobile){
            opsbotData.previewCloseButton.className = "mobile";
        }
        opsbotData.chatBubbleArrow = document.createElement("span");
        opsbotData.chatBubbleArrow.setAttribute("id", "opsbot-arrow");
        opsbotData.chatPreviewBox.appendChild(opsbotData.previewCloseButton);
        for (let i = 0; i < opsbotData.currentGreetings.length; ++i) {
            let greetingContent = document.createElement("div");
            greetingContent.className = "opsbot-content";
            greetingContent.onclick = function(){
                opsbotFrame.contentWindow.postMessage( { eventName: "greeting-clicked" }, '*' )
            }
            if(opsbotData.currentGreetings[i].imageUrl){
                let imageBox = document.createElement("div");
                imageBox.className = "opsbot-greeting-img";
                let image = document.createElement("img");
                image.setAttribute("src", opsbotData.currentGreetings[i].imageUrl);
                imageBox.appendChild(image);
                greetingContent.appendChild(imageBox);
            }
            let greetingText = document.createElement("p");
            greetingText.className = "opsbot-text";
            greetingText.innerHTML = opsbotGreetingsSetting.removeScriptAndDownload(opsbotData.currentGreetings[i].text);
            greetingContent.appendChild(greetingText);
            opsbotData.chatPreviewBox.appendChild(greetingContent);
            if(opsbotData.eventData.greetingsType == 'slide'){
                greetingContent.onclick = function(){
                    showOpsbotChatting()
                }
            }
        }
        if(opsbotData.currentGreetings.length == 0){
            opsbotData.chatBubbleArrow.setAttribute("style", "display: none;");
        }
        opsbotData.chatPreviewBox.appendChild(opsbotData.chatBubbleArrow);
        opsbotData.previewCloseButton.onclick = function(){
            opsbotGreetingsSetting.previewCloseClicked();
        }
    },
    previewCloseClicked: function(){
        opsbotData.showPreview = false;
        let closeClickedCnt = 1
        if(sessionStorage && sessionStorage.getItem("opsbot_close_greeting_cnt")){
            closeClickedCnt = parseInt(sessionStorage.getItem("opsbot_close_greeting_cnt")) + 1
        }
        opsbotData.closeClickedCnt = closeClickedCnt;
        sessionStorage.setItem("opsbot_close_greeting_cnt", opsbotData.closeClickedCnt);
        if(opsbotData.closeClickedCnt >= opsbotData.eventData.greetingsCloseCnt){
            opsbotData.closeClicked = true;
            opsbotData.chatFloating.setAttribute('style', makeOpsbotFloatingStyle(`background-color:${opsbotData.eventData.floating};height:${opsbotData.eventData.floatingIconSize}px;width:${opsbotData.eventData.floatingIconSize}px;`))
            opsbotData.greetingsList.forEach(item => {
                clearTimeout(item.timeout);
            });
            opsbotData.chatBubbleArrow.setAttribute("style", "display: none;");
        }
        if(opsbotData.currentGreetings.length == 0){
            const opsbot = document.getElementById("opsbot");
            if(!opsbot) { return; }
            opsbotData.opsbotClose = true;
            opsbot.setAttribute("style", "display: none;");
        }
        if(opsbotData.currentGreetings.length != 0){
            opsbotFrame.contentWindow.postMessage( { eventName: "greeting-close-clicked" }, '*' )
            opsbotData.currentGreetings = [];
            opsbotGreetingsSetting.initPreviewContents();
            opsbotGreetingsSetting.initGreetings();
            if(!opsbotData.eventData.floatingIconClose){
                opsbotData.previewCloseButton.setAttribute("style", "display: none;");
            }
        }
    },
    initGreetings: function (){
        var opsbot = document.getElementById("opsbot");
        if(!opsbot && !opsbotData.eventData.greetingsType) { return; }
        if(opsbotData.eventData.greetingsType == 'slide' && opsbotData.eventData.greetingsView == 'hover'){
            let textList = document.getElementsByClassName('opsbot-text');
            for (let i = 0; i < textList.length; ++i) {
                let item = textList[i];  
                item.setAttribute('style', `color: ${opsbotData.eventData.greetings}`);
            }
        }
        opsbotData.chatPreview.setAttribute("style", `${opsbotData.eventData.greetingsType=='slide'?'height:'+opsbotData.eventData.floatingIconSize+'px;width:'+opsbotData.eventData.floatingIconSize+'px;':'width:auto;'} ${opsbotData.eventData.greetingsType=='bubble' && !opsbotData.showPreview?'height: '+(opsbotData.eventData.floatingIconSize - 35)+'px;':''}` + "display: block;");
        let contentList = document.getElementsByClassName('opsbot-content');
        for (let i = 0; i < contentList.length; ++i) {
            let item = contentList[i];  
            item.setAttribute('style', `${opsbotData.eventData.greetingsType == 'slide'?'height:'+opsbotData.eventData.floatingIconSize+'px;min-width:'+opsbotData.eventData.floatingIconSize+'px;background-color:'+opsbotData.eventData.greetings+';':'background-color:'+opsbotData.eventData.greetings}${opsbotData.eventData.greetingsType=='slide'&&opsbotData.eventData.greetingsView != 'hover'?'max-width:375px;':''}`);
        }
        let textList = document.getElementsByClassName('opsbot-text');
        for (let i = 0; i < textList.length; ++i) {
            let item = textList[i];  
            item.setAttribute('style', `color: ${opsbotData.eventData.greetingsFont}`);
        }
        opsbotData.chatPreview.className = `${opsbotData.eventData.greetingsType}-type` + `${opsbotData.eventData.greetingsView == 'hover'?' hover-type':''}`;
        if(opsbotData.currentGreetings.length == 0){
            opsbotData.chatBubbleArrow = document.createElement("span");
            return opsbotData.chatBubbleArrow.setAttribute("style", "display: none;");
        }
        opsbotData.chatBubbleArrow.setAttribute('style', `background-color: ${opsbotData.eventData.greetings}`);
    }
};

checkOpsbotCreated();